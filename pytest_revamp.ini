[tool:pytest]
# Cuentamelo Testing Framework Revamp - Pytest Configuration
# This configuration implements the testing framework revamp plan with:
# - Comprehensive test discovery and organization
# - Parallel test execution support
# - Coverage reporting configuration
# - Test categorization and filtering
# - Performance monitoring
# - Integration with CI/CD pipeline

# Test discovery and organization
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*
addopts = 
    # Verbosity and output
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --durations=10
    
    # Test organization
    --cache-clear
    --strict-config
    
    # Coverage (can be overridden)
    --cov=app
    --cov-report=term-missing
    --cov-report=html:coverage/html
    --cov-report=xml:coverage/coverage.xml
    
    # Parallel execution (can be overridden)
    -n auto
    
    # Test categorization
    --markers=unit: Unit tests for individual components
    --markers=integration: Integration tests for component interactions
    --markers=infrastructure: Tests for infrastructure components
    --markers=performance: Performance and load tests
    --markers=slow: Tests that take longer to run
    --markers=fast: Tests that run quickly
    --markers=api: API endpoint tests
    --markers=database: Database-related tests
    --markers=redis: Redis-related tests
    --markers=async: Asynchronous tests
    --markers=mock: Tests using mocks
    --markers=real: Tests using real services

# Test markers for categorization
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interactions
    infrastructure: Tests for infrastructure components (command broker, event bus, etc.)
    performance: Performance and load tests
    slow: Tests that take longer to run
    fast: Tests that run quickly
    api: API endpoint tests
    database: Database-related tests
    redis: Redis-related tests
    async: Asynchronous tests
    mock: Tests using mocks
    real: Tests using real services
    command_broker: Command broker service tests
    frontend_service: Frontend service tests
    event_bus: Event bus tests
    dependency_container: Dependency container tests
    n8n: N8N integration tests
    langgraph: LangGraph orchestration tests
    claude: Claude AI provider tests
    twitter: Twitter provider tests
    news: News provider tests

# Coverage configuration
[coverage:run]
source = app
omit = 
    */tests/*
    */mocks/*
    */__pycache__/*
    */venv/*
    */venv/*/*
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# Test categories and their configurations
[testenv:unit]
deps = pytest pytest-cov pytest-asyncio
commands = pytest -m unit --cov=app --cov-report=html:coverage/unit

[testenv:integration]
deps = pytest pytest-cov pytest-asyncio
commands = pytest -m integration --cov=app --cov-report=html:coverage/integration

[testenv:infrastructure]
deps = pytest pytest-cov pytest-asyncio
commands = pytest -m infrastructure --cov=app --cov-report=html:coverage/infrastructure

[testenv:performance]
deps = pytest pytest-cov pytest-asyncio
commands = pytest -m performance

# Parallel test execution configuration
[testenv:parallel]
deps = pytest pytest-cov pytest-asyncio pytest-xdist
commands = pytest -n auto --cov=app --cov-report=html:coverage/parallel

# Fast test suite for development
[testenv:fast]
deps = pytest pytest-cov pytest-asyncio
commands = pytest -m "fast and not slow" --cov=app --cov-report=term-missing

# Complete test suite
[testenv:all]
deps = pytest pytest-cov pytest-asyncio pytest-xdist
commands = pytest --cov=app --cov-report=html:coverage/all --cov-report=xml:coverage/coverage.xml

# CI/CD pipeline configuration
[testenv:ci]
deps = pytest pytest-cov pytest-asyncio pytest-xdist
commands = 
    pytest --cov=app --cov-report=xml:coverage/coverage.xml --cov-report=term-missing
    coverage report --fail-under=80

# Documentation and help
[testenv:help]
commands = pytest --help

# Test discovery and debugging
[testenv:collect]
commands = pytest --collect-only

# Test filtering examples
[testenv:command_broker]
commands = pytest -m command_broker --cov=app.services.command_broker_service

[testenv:frontend_service]
commands = pytest -m frontend_service --cov=app.services.n8n_frontend_service

[testenv:event_bus]
commands = pytest -m event_bus --cov=app.services.frontend_event_bus

[testenv:dependency_container]
commands = pytest -m dependency_container --cov=app.services.dependency_container 